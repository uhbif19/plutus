-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Marlowe: financial contracts on Cardano Computation Layer
--   
--   A reference implementation of Marlowe, domain-specific language
--   targeted at the execution of financial contracts in the style of
--   Peyton Jones et al on Cardano Computation Layer.
@package marlowe-cardano-minimal
@version 0.1.0.3


-- | Address types for Marlowe.
module Language.Marlowe.Core.V1.Semantics.Types.Address

-- | Type of network.
type Network = Bool


-- | Types for Marlowe semantics
module Language.Marlowe.Core.V1.Semantics.Types

-- | A party's internal account in a contract.
type AccountId = Party

-- | The accounts in a contract.
type Accounts = Map (AccountId, Token) Integer

-- | The name of a choice in a contract.
type ChoiceName = BuiltinByteString

-- | A numeric choice in a contract.
type ChosenNum = Integer

-- | A multi-asset value.
type Money = Value

-- | The time validity range for a Marlowe transaction, inclusive of both
--   endpoints.
type TimeInterval = (POSIXTime, POSIXTime)

-- | A timeout in a contract.
type Timeout = POSIXTime

-- | Actions happen at particular points during execution. Three kinds of
--   action are possible:
--   
--   <ul>
--   <li>A <tt>Deposit n p v</tt> makes a deposit of value <tt>v</tt> into
--   account <tt>n</tt> belonging to party <tt>p</tt>.</li>
--   <li>A choice is made for a particular id with a list of bounds on the
--   values that are acceptable. For example, <tt>[(0, 0), (3, 5]</tt>
--   offers the choice of one of 0, 3, 4 and 5.</li>
--   <li>The contract is notified that a particular observation be made.
--   Typically this would be done by one of the parties, or one of their
--   wallets acting automatically.</li>
--   </ul>
data Action
Deposit :: AccountId -> Party -> Token -> Value Observation -> Action
Choice :: ChoiceId -> [Bound] -> Action
Notify :: Observation -> Action

-- | The (inclusive) bound on a choice number.
data Bound
Bound :: Integer -> Integer -> Bound

-- | A case is a branch of a when clause, guarded by an action. The
--   continuation of the contrack may be merkleized or not.
--   
--   Plutus doesn't support mutually recursive data types yet. datatype
--   Case is mutually recurvive with <tt>Contract</tt>
data Case a
Case :: Action -> a -> Case a
MerkleizedCase :: Action -> BuiltinByteString -> Case a

-- | Choices – of integers – are identified by ChoiceId which combines a
--   name for the choice with the Party who had made the choice.
data ChoiceId
ChoiceId :: BuiltinByteString -> Party -> ChoiceId

-- | Marlowe has six ways of building contracts. Five of these –
--   <a>Pay</a>, <a>Let</a>, <a>If</a>, <a>When</a> and <a>Assert</a> –
--   build a complex contract from simpler contracts, and the sixth,
--   <a>Close</a>, is a simple contract. At each step of execution, as well
--   as returning a new state and continuation contract, it is possible
--   that effects – payments – and warnings can be generated too.
data Contract
Close :: Contract
Pay :: AccountId -> Payee -> Token -> Value Observation -> Contract -> Contract
If :: Observation -> Contract -> Contract -> Contract
When :: [Case Contract] -> Timeout -> Contract -> Contract
Let :: ValueId -> Value Observation -> Contract -> Contract
Assert :: Observation -> Contract -> Contract

-- | Execution environment. Contains a time interval of a transaction.
newtype Environment
Environment :: TimeInterval -> Environment
[timeInterval] :: Environment -> TimeInterval

-- | Input to a contract, which may include the merkleized continuation of
--   the contract and its hash.
data Input
NormalInput :: InputContent -> Input
MerkleizedInput :: InputContent -> BuiltinByteString -> Contract -> Input

-- | Input for a Marlowe contract. Correspond to expected <a>Action</a>s.
data InputContent
IDeposit :: AccountId -> Party -> Token -> Integer -> InputContent
IChoice :: ChoiceId -> ChosenNum -> InputContent
INotify :: InputContent

-- | Result of <tt>fixInterval</tt>
data IntervalResult
IntervalTrimmed :: Environment -> State -> IntervalResult
IntervalError :: IntervalError -> IntervalResult

-- | Observations are Boolean values derived by comparing values, and can
--   be combined using the standard Boolean operators.
--   
--   It is also possible to observe whether any choice has been made (for a
--   particular identified choice).
data Observation
AndObs :: Observation -> Observation -> Observation
OrObs :: Observation -> Observation -> Observation
NotObs :: Observation -> Observation
ChoseSomething :: ChoiceId -> Observation
ValueGE :: Value Observation -> Value Observation -> Observation
ValueGT :: Value Observation -> Value Observation -> Observation
ValueLT :: Value Observation -> Value Observation -> Observation
ValueLE :: Value Observation -> Value Observation -> Observation
ValueEQ :: Value Observation -> Value Observation -> Observation
TrueObs :: Observation
FalseObs :: Observation

-- | A Party to a contractt.
data Party

-- | Party identified by a network address.
Address :: Network -> Address -> Party

-- | Party identified by a role token name.
Role :: TokenName -> Party

-- | A payment can be made to one of the parties to the contract, or to one
--   of the accounts of the contract, and this is reflected in the
--   definition.
data Payee
Account :: AccountId -> Payee
Party :: Party -> Payee

-- | Marlowe contract internal state. Stored in a <i>Datum</i> of a
--   transaction output.
data State
State :: Accounts -> Map ChoiceId ChosenNum -> Map ValueId Integer -> POSIXTime -> State
[accounts] :: State -> Accounts
[choices] :: State -> Map ChoiceId ChosenNum
[boundValues] :: State -> Map ValueId Integer
[minTime] :: State -> POSIXTime

-- | Token - represents a currency or token, it groups a pair of a currency
--   symbol and token name.
data Token
Token :: CurrencySymbol -> TokenName -> Token

-- | Values include some quantities that change with time, including “the
--   time interval”, “the current balance of an account”, and any choices
--   that have already been made.
--   
--   Values can also be scaled, and combined using addition, subtraction,
--   and negation.
data Value a
AvailableMoney :: AccountId -> Token -> Value a
Constant :: Integer -> Value a
NegValue :: Value a -> Value a
AddValue :: Value a -> Value a -> Value a
SubValue :: Value a -> Value a -> Value a
MulValue :: Value a -> Value a -> Value a
DivValue :: Value a -> Value a -> Value a
ChoiceValue :: ChoiceId -> Value a
TimeIntervalStart :: Value a
TimeIntervalEnd :: Value a
UseValue :: ValueId -> Value a
Cond :: a -> Value a -> Value a -> Value a

-- | Values, as defined using Let ar e identified by name, and can be used
--   by <a>UseValue</a> construct.
newtype ValueId
ValueId :: BuiltinByteString -> ValueId

-- | Time interval errors. <a>InvalidInterval</a> means <tt>slotStart &gt;
--   slotEnd</tt>, and <a>IntervalInPastError</a> means time interval is in
--   the past, relative to the contract.
--   
--   These errors should never occur, but we are always prepared.
data IntervalError
InvalidInterval :: TimeInterval -> IntervalError
IntervalInPastError :: POSIXTime -> TimeInterval -> IntervalError

-- | Empty State for a given minimal <a>POSIXTime</a>
emptyState :: POSIXTime -> State

-- | Extract the <tt>Action</tt> from a <tt>Case</tt>.
getAction :: Case a -> Action

-- | Extract the content of input.
getInputContent :: Input -> InputContent

-- | Check if a <tt>num</tt> is withint a list of inclusive bounds.
inBounds :: ChosenNum -> [Bound] -> Bool
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.Input
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.Input
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.Input
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Input
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Input
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.InputContent
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.InputContent
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.InputContent
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.InputContent
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.InputContent
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Environment
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Environment
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.State
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.State
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.State
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.State
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.State
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.Contract
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.Contract
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.Contract
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Contract
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Contract
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.Payee
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.Payee
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.Payee
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Payee
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Payee
instance PlutusTx.IsData.Class.ToData a => PlutusTx.IsData.Class.ToData (Language.Marlowe.Core.V1.Semantics.Types.Case a)
instance PlutusTx.IsData.Class.FromData a => PlutusTx.IsData.Class.FromData (Language.Marlowe.Core.V1.Semantics.Types.Case a)
instance PlutusTx.IsData.Class.UnsafeFromData a => PlutusTx.IsData.Class.UnsafeFromData (Language.Marlowe.Core.V1.Semantics.Types.Case a)
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Case
instance (PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni a, PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni a) => PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni (Language.Marlowe.Core.V1.Semantics.Types.Case a)
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.Action
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.Action
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.Action
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Action
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Action
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.Bound
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.Bound
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.Bound
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Bound
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Bound
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.Observation
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.Observation
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.Observation
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Observation
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Observation
instance PlutusTx.IsData.Class.ToData a => PlutusTx.IsData.Class.ToData (Language.Marlowe.Core.V1.Semantics.Types.Value a)
instance PlutusTx.IsData.Class.FromData a => PlutusTx.IsData.Class.FromData (Language.Marlowe.Core.V1.Semantics.Types.Value a)
instance PlutusTx.IsData.Class.UnsafeFromData a => PlutusTx.IsData.Class.UnsafeFromData (Language.Marlowe.Core.V1.Semantics.Types.Value a)
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Value
instance (PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni a, PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni a) => PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni (Language.Marlowe.Core.V1.Semantics.Types.Value a)
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.Token
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.Token
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.Token
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Token
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Token
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.ChoiceId
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.ChoiceId
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.ChoiceId
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.ChoiceId
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.ChoiceId
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.Types.Party
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.Types.Party
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.Types.Party
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Party
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.Party
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.Party
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.Party
instance GHC.Classes.Ord Language.Marlowe.Core.V1.Semantics.Types.Party
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.Party
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.Party
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.ChoiceId
instance GHC.Classes.Ord Language.Marlowe.Core.V1.Semantics.Types.ChoiceId
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.ChoiceId
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.ChoiceId
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.ChoiceId
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.Token
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.Token
instance GHC.Classes.Ord Language.Marlowe.Core.V1.Semantics.Types.Token
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.Token
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.Token
instance Control.Newtype.Generics.Newtype Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance GHC.Classes.Ord Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance Data.String.IsString Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance Data.Data.Data a => Data.Data.Data (Language.Marlowe.Core.V1.Semantics.Types.Value a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Language.Marlowe.Core.V1.Semantics.Types.Value a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Language.Marlowe.Core.V1.Semantics.Types.Value a)
instance GHC.Generics.Generic (Language.Marlowe.Core.V1.Semantics.Types.Value a)
instance GHC.Show.Show a => GHC.Show.Show (Language.Marlowe.Core.V1.Semantics.Types.Value a)
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.Observation
instance GHC.Classes.Ord Language.Marlowe.Core.V1.Semantics.Types.Observation
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.Observation
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.Observation
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.Observation
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.Bound
instance GHC.Classes.Ord Language.Marlowe.Core.V1.Semantics.Types.Bound
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.Bound
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.Bound
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.Bound
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.Action
instance GHC.Classes.Ord Language.Marlowe.Core.V1.Semantics.Types.Action
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.Action
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.Action
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.Action
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.Payee
instance GHC.Classes.Ord Language.Marlowe.Core.V1.Semantics.Types.Payee
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.Payee
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.Payee
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.Payee
instance Data.Data.Data a => Data.Data.Data (Language.Marlowe.Core.V1.Semantics.Types.Case a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Language.Marlowe.Core.V1.Semantics.Types.Case a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Language.Marlowe.Core.V1.Semantics.Types.Case a)
instance GHC.Generics.Generic (Language.Marlowe.Core.V1.Semantics.Types.Case a)
instance GHC.Show.Show a => GHC.Show.Show (Language.Marlowe.Core.V1.Semantics.Types.Case a)
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.Contract
instance GHC.Classes.Ord Language.Marlowe.Core.V1.Semantics.Types.Contract
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.Contract
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.Contract
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.Contract
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.State
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.State
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.State
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.State
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.Environment
instance GHC.Classes.Ord Language.Marlowe.Core.V1.Semantics.Types.Environment
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.Environment
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.Environment
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.InputContent
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.InputContent
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.InputContent
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.InputContent
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.Input
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.Input
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.Input
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.Input
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.IntervalError
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.IntervalError
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Types.IntervalError
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.IntervalError
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Types.IntervalResult
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.Types.IntervalResult
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Types.IntervalResult
instance Data.Data.Data PlutusLedgerApi.V1.Time.POSIXTime
instance Data.Data.Data PlutusLedgerApi.V1.Address.Address
instance Data.Data.Data PlutusLedgerApi.V1.Credential.Credential
instance Data.Data.Data PlutusLedgerApi.V1.Crypto.PubKeyHash
instance Data.Data.Data PlutusLedgerApi.V1.Scripts.ScriptHash
instance Data.Data.Data PlutusLedgerApi.V1.Credential.StakingCredential
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.Types.State
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.Types.Contract
instance PlutusTx.Eq.Eq a => PlutusTx.Eq.Eq (Language.Marlowe.Core.V1.Semantics.Types.Case a)
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.Types.Payee
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.Types.Action
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.Types.Observation
instance PlutusTx.Eq.Eq a => PlutusTx.Eq.Eq (Language.Marlowe.Core.V1.Semantics.Types.Value a)
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.Types.ValueId
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.Types.Token
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.Types.ChoiceId
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.Types.Party


-- | <h1>Marlowe: financial contracts domain specific language for
--   blockchain</h1>
--   
--   Here we present a reference implementation of Marlowe, domain-specific
--   language targeted at the execution of financial contracts in the style
--   of Peyton Jones et al on Cardano.
--   
--   This is the Haskell implementation of Marlowe semantics for Cardano.
--   
--   <h2>Semantics</h2>
--   
--   Semantics is based on
--   <a>https://github.com/input-output-hk/marlowe/blob/stable/src/Semantics.hs</a>
--   
--   Marlowe Contract execution is a chain of transactions, where remaining
--   contract and its state is passed through <i>Datum</i>, and actions
--   (i.e. <i>Choices</i>) are passed as <i>Redeemer Script</i>
--   
--   <i>Validation Script</i> is always the same Marlowe interpreter
--   implementation, available below.
module Language.Marlowe.Core.V1.Semantics

-- | This data type is a content of a contract's <i>Datum</i>
data MarloweData
MarloweData :: MarloweParams -> State -> Contract -> MarloweData
[marloweParams] :: MarloweData -> MarloweParams
[marloweState] :: MarloweData -> State
[marloweContract] :: MarloweData -> Contract

-- | Parameters constant during the course of a contract.
newtype MarloweParams
MarloweParams :: CurrencySymbol -> MarloweParams
[rolesCurrency] :: MarloweParams -> CurrencySymbol

-- | Payment occurs during <a>Pay</a> contract evaluation, and when
--   positive balances are payed out on contract closure.
data Payment
Payment :: AccountId -> Payee -> Token -> Integer -> Payment

-- | Marlowe transaction input.
data TransactionInput
TransactionInput :: TimeInterval -> [Input] -> TransactionInput
[txInterval] :: TransactionInput -> TimeInterval
[txInputs] :: TransactionInput -> [Input]

-- | Marlowe transaction output.
data TransactionOutput
TransactionOutput :: [TransactionWarning] -> [Payment] -> State -> Contract -> TransactionOutput
[txOutWarnings] :: TransactionOutput -> [TransactionWarning]
[txOutPayments] :: TransactionOutput -> [Payment]
[txOutState] :: TransactionOutput -> State
[txOutContract] :: TransactionOutput -> Contract
Error :: TransactionError -> TransactionOutput

-- | Try to compute outputs of a transaction given its inputs, a contract,
--   and it's <tt>State</tt>
computeTransaction :: TransactionInput -> State -> Contract -> TransactionOutput

-- | Run a set of inputs starting from a contract and empty state,
--   reporting the result.
playTrace :: POSIXTime -> Contract -> [TransactionInput] -> TransactionOutput

-- | Add the given amount of money to an account (only if it is positive).
--   Return the updated Map.
addMoneyToAccount :: AccountId -> Token -> Integer -> Accounts -> Accounts

-- | Try to apply a single input content to a single action.
applyAction :: Environment -> State -> InputContent -> Action -> ApplyAction

-- | Apply a list of Inputs to the contract.
applyAllInputs :: Environment -> State -> Contract -> [Input] -> ApplyAllResult

-- | Try to apply an input to a list of cases, accepting the first match.
applyCases :: Environment -> State -> Input -> [Case Contract] -> ApplyResult

-- | Apply a single <tt>Input</tt> to a current contract.
applyInput :: Environment -> State -> Input -> Contract -> ApplyResult

-- | Propagate <a>ReduceWarning</a> to <a>TransactionWarning</a>.
convertReduceWarnings :: [ReduceWarning] -> [TransactionWarning]

-- | Evaluate <a>Observation</a> to <a>Bool</a>.
evalObservation :: Environment -> State -> Observation -> Bool

-- | Evaluates <tt>Value</tt> given current <tt>State</tt> and
--   <tt>Environment</tt>.
evalValue :: Environment -> State -> Value Observation -> Integer

-- | Checks <tt>interval</tt> and trims it if necessary.
fixInterval :: TimeInterval -> State -> IntervalResult

-- | Try to get a continuation from a pair of Input and Case.
getContinuation :: Input -> Case Contract -> Maybe Contract

-- | Gives the given amount of money to the given payee. Returns the
--   appropriate effect and updated accounts.
giveMoney :: AccountId -> Payee -> Token -> Integer -> Accounts -> (ReduceEffect, Accounts)

-- | Obtains the amount of money available an account.
moneyInAccount :: AccountId -> Token -> Accounts -> Integer

-- | Run a set of inputs starting from the results of a transaction,
--   reporting the new result.
playTraceAux :: TransactionOutput -> [TransactionInput] -> TransactionOutput

-- | Carry a step of the contract with no inputs.
reduceContractStep :: Environment -> State -> Contract -> ReduceStepResult

-- | Reduce a contract until it cannot be reduced more.
reduceContractUntilQuiescent :: Environment -> State -> Contract -> ReduceResult

-- | Pick the first account with money in it.
refundOne :: Accounts -> Maybe ((Party, Token, Integer), Accounts)

-- | Sets the amount of money available in an account.
updateMoneyInAccount :: AccountId -> Token -> Integer -> Accounts -> Accounts

-- | Result of applying an action to a contract.
data ApplyAction
AppliedAction :: ApplyWarning -> State -> ApplyAction
NotAppliedAction :: ApplyAction

-- | Result of <a>applyAllInputs</a>
data ApplyAllResult
ApplyAllSuccess :: Bool -> [TransactionWarning] -> [Payment] -> State -> Contract -> ApplyAllResult
ApplyAllNoMatchError :: ApplyAllResult
ApplyAllAmbiguousTimeIntervalError :: ApplyAllResult
ApplyAllHashMismatch :: ApplyAllResult

-- | Result of <a>applyCases</a>
data ApplyResult
Applied :: ApplyWarning -> State -> Contract -> ApplyResult
ApplyNoMatchError :: ApplyResult
ApplyHashMismatch :: ApplyResult

-- | Warning of <a>applyCases</a>
data ApplyWarning
ApplyNoWarning :: ApplyWarning
ApplyNonPositiveDeposit :: Party -> AccountId -> Token -> Integer -> ApplyWarning

-- | Effect of <a>reduceContractStep</a> computation
data ReduceEffect
ReduceWithPayment :: Payment -> ReduceEffect
ReduceNoPayment :: ReduceEffect

-- | Result of <a>reduceContractUntilQuiescent</a>
data ReduceResult
ContractQuiescent :: Bool -> [ReduceWarning] -> [Payment] -> State -> Contract -> ReduceResult
RRAmbiguousTimeIntervalError :: ReduceResult

-- | Result of <a>reduceContractStep</a>
data ReduceStepResult
Reduced :: ReduceWarning -> ReduceEffect -> State -> Contract -> ReduceStepResult
NotReduced :: ReduceStepResult
AmbiguousTimeIntervalReductionError :: ReduceStepResult

-- | Warning during <a>reduceContractStep</a>
data ReduceWarning
ReduceNoWarning :: ReduceWarning
ReduceNonPositivePay :: AccountId -> Payee -> Token -> Integer -> ReduceWarning
ReducePartialPay :: AccountId -> Payee -> Token -> Integer -> Integer -> ReduceWarning
ReduceShadowing :: ValueId -> Integer -> Integer -> ReduceWarning
ReduceAssertionFailed :: ReduceWarning

-- | Transaction error
data TransactionError
TEAmbiguousTimeIntervalError :: TransactionError
TEApplyNoMatchError :: TransactionError
TEIntervalError :: IntervalError -> TransactionError
TEUselessTransaction :: TransactionError
TEHashMismatch :: TransactionError

-- | Warnings during transaction computation
data TransactionWarning
TransactionNonPositiveDeposit :: Party -> AccountId -> Token -> Integer -> TransactionWarning
TransactionNonPositivePay :: AccountId -> Payee -> Token -> Integer -> TransactionWarning
TransactionPartialPay :: AccountId -> Payee -> Token -> Integer -> Integer -> TransactionWarning
TransactionShadowing :: ValueId -> Integer -> Integer -> TransactionWarning
TransactionAssertionFailed :: TransactionWarning

-- | Check that all accounts have positive balance.
allBalancesArePositive :: State -> Bool

-- | Calculates an upper bound for the maximum lifespan of a contract
--   (assuming is not merkleized)
contractLifespanUpperBound :: Contract -> POSIXTime

-- | Check if a contract is just <tt>Close</tt>.
isClose :: Contract -> Bool

-- | Check if a contract is not just <tt>Close</tt>.
notClose :: Contract -> Bool

-- | Extract the money value from a payment.
paymentMoney :: Payment -> Money

-- | Total the balance in all accounts.
totalBalance :: Accounts -> Money
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.MarloweData
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.MarloweData
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.MarloweParams
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.MarloweParams
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.MarloweData
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.MarloweData
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.MarloweData
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Core.V1.Semantics.MarloweParams
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Core.V1.Semantics.MarloweParams
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Core.V1.Semantics.MarloweParams
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.TransactionOutput
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.TransactionOutput
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.TransactionError
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.TransactionError
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ApplyAllResult
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ApplyAllResult
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.TransactionWarning
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.TransactionWarning
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ApplyResult
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ApplyResult
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ApplyWarning
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ApplyWarning
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ReduceResult
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ReduceResult
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ReduceStepResult
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ReduceStepResult
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ReduceWarning
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ReduceWarning
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ReduceEffect
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.ReduceEffect
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Payment
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Payment
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.IntervalResult
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.IntervalResult
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.IntervalError
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Core.V1.Semantics.Types.IntervalError
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.Payment
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.Payment
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.Payment
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.ReduceEffect
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.ReduceEffect
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.ReduceWarning
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.ReduceWarning
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.ReduceStepResult
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.ReduceStepResult
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.ReduceResult
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.ReduceResult
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.ApplyWarning
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.ApplyWarning
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.ApplyResult
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.ApplyResult
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.TransactionWarning
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.TransactionWarning
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.TransactionWarning
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.TransactionWarning
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.ApplyAllResult
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.ApplyAllResult
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.TransactionError
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.TransactionError
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.TransactionError
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.TransactionError
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.TransactionInput
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.TransactionInput
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.TransactionInput
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.TransactionOutput
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.TransactionOutput
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.MarloweParams
instance GHC.Classes.Ord Language.Marlowe.Core.V1.Semantics.MarloweParams
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.MarloweParams
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.MarloweParams
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.MarloweParams
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.MarloweData
instance GHC.Generics.Generic Language.Marlowe.Core.V1.Semantics.MarloweData
instance GHC.Classes.Eq Language.Marlowe.Core.V1.Semantics.MarloweData
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.MarloweData
instance Data.Data.Data Language.Marlowe.Core.V1.Semantics.ApplyAction
instance GHC.Show.Show Language.Marlowe.Core.V1.Semantics.ApplyAction
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.ReduceWarning
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.ReduceEffect
instance PlutusTx.Eq.Eq Language.Marlowe.Core.V1.Semantics.Payment


-- | Marlowe validators.
module Language.Marlowe.Scripts.RolePayout

-- | The hash of the Marlowe payout validator.
rolePayoutValidatorHash :: ScriptHash

-- | The serialisation of the Marlowe payout validator.
rolePayoutValidatorBytes :: SerialisedScript

-- | The Marlowe payout validator.
rolePayoutValidator :: CompiledCode (BuiltinData -> BuiltinData -> BuiltinData -> ())

-- | The Marlowe payout validator.
mkRolePayoutValidator :: (CurrencySymbol, TokenName) -> () -> ScriptContext -> Bool


-- | Marlowe validators.
module Language.Marlowe.Scripts.Semantics

-- | Input to a Marlowe transaction.
type MarloweInput = [MarloweTxInput]

-- | A single input applied in the Marlowe semantics validator.
data MarloweTxInput
Input :: InputContent -> MarloweTxInput
MerkleizedTxInput :: InputContent -> BuiltinByteString -> MarloweTxInput

-- | The hash of the Marlowe semantics validator.
marloweValidatorHash :: ScriptHash

-- | The serialisation of the Marlowe semantics validator.
marloweValidatorBytes :: SerialisedScript

-- | The validator for Marlowe semantics.
marloweValidator :: CompiledCode (BuiltinData -> BuiltinData -> BuiltinData -> ())

-- | The Marlowe semantics validator.
mkMarloweValidator :: ScriptHash -> MarloweData -> MarloweInput -> ScriptContext -> Bool

-- | Convert semantics inputs to transaction inputs.
marloweTxInputsFromInputs :: [Input] -> [MarloweTxInput]
instance PlutusTx.IsData.Class.ToData Language.Marlowe.Scripts.Semantics.MarloweTxInput
instance PlutusTx.IsData.Class.FromData Language.Marlowe.Scripts.Semantics.MarloweTxInput
instance PlutusTx.IsData.Class.UnsafeFromData Language.Marlowe.Scripts.Semantics.MarloweTxInput
instance PlutusTx.Lift.Class.Typeable PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Scripts.Semantics.MarloweTxInput
instance PlutusTx.Lift.Class.Lift PlutusCore.Default.Universe.DefaultUni Language.Marlowe.Scripts.Semantics.MarloweTxInput
instance GHC.Generics.Generic Language.Marlowe.Scripts.Semantics.MarloweTxInput
instance GHC.Classes.Eq Language.Marlowe.Scripts.Semantics.MarloweTxInput
instance GHC.Show.Show Language.Marlowe.Scripts.Semantics.MarloweTxInput
